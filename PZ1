#include <iostream>
#include <cstdlib>
#include <time.h>
#include <sstream>
#include <string>

class Matrix
{
private:
	int rows;
	int cols;
	int* nonZeroArray;
	int* matrix;
	
public:
	Matrix(int rows, int cols)
	{
		this->rows = rows;
		this->cols = cols;
		InitializeMatrix();
	}

	~Matrix()
	{
		delete[] nonZeroArray;
		delete[] matrix;
	}

	void PrintMatrix() const; 
	void PrintNonZeroArray() const;
	void MultiplyMatrixByNumber(int number);
	void TransposeMatrix();
	Matrix* AddMatrix(Matrix* matrix2);
	Matrix* MultiplyMatrixes(Matrix* matrix2);
	void HandleInput();
	void RandomMatrix();
	bool CompareMatrix(Matrix* matrix2);

private:
	void InitializeMatrix();
	int* InitializeArray(int size);
	void CalculateNonZero();
	void InputMatrix(int row);
	int* ManualMatrix(int row);
};


void Matrix::InitializeMatrix()
{
	matrix = new int[rows * cols];

	/*for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			matrix[i * cols + j] = new int;
		}
	}*/
}

void Matrix::RandomMatrix()
{
	srand(time(0));

	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			if (rand() % 3 == 1)
			{
				matrix[i * cols + j] = rand() % 101;
			}
			else
			{
				matrix[i * cols + j] = 0;
			}
		}
	}
	CalculateNonZero();
}

int* Matrix::InitializeArray(int size)
{
	int* array = new int[size];

	for (int i = 0; i < size; i++)
	{
		array[i] = 0;
	}
	return array;
}

void Matrix::CalculateNonZero()
{
	int nonZeroIndex = 0;
	int* nonZeroArrayTemp = InitializeArray(rows * cols);

	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			if (matrix[i * cols + j] != 0)
			{
				nonZeroArrayTemp[nonZeroIndex] = matrix[i * cols + j];
				nonZeroIndex++;
			}
		}
	}
	nonZeroArray = InitializeArray(nonZeroIndex);
	for (int i = 0; i < nonZeroIndex; i++)
	{
		nonZeroArray[i] = nonZeroArrayTemp[i];
	}
	delete[] nonZeroArrayTemp;
}

void Matrix::PrintMatrix() const
{
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			std::cout << matrix[i * cols + j] << " ";
		}
		std::cout << "\n";
	}
	std::cout << "\n";
}

void Matrix::PrintNonZeroArray() const
{
	std::cout << "Non zero array : ";
	if (sizeof(nonZeroArray) == 0)
	{
		std::cout << "empty";
		return;
	}

	for (int i = 0; i < sizeof(nonZeroArray) / sizeof(nonZeroArray[0]); i++)
	{
		std::cout << nonZeroArray[i] << " ";
	}
	std::cout << "\n";
}

void Matrix::MultiplyMatrixByNumber(int number)
{
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			matrix[i * cols + j] *= number;
		}
	}
}

void Matrix::TransposeMatrix()
{
	Matrix* result = new Matrix(cols, rows);
	result->InitializeMatrix();

	for (int i = 0; i < cols; i++)
	{
		for (int j = 0; j < rows; j++)
		{
			result->matrix[i * cols + j] = matrix[i * cols + j];
		}
	}
	int temp = rows;
	rows = cols;
	cols = temp;
	InitializeMatrix();

	matrix = result->matrix;
	delete[] result->matrix;
	delete result;
}


Matrix* Matrix::AddMatrix(Matrix* matrix2)
{

	Matrix* result = new Matrix(rows, cols);
	result->InitializeMatrix();

	if (cols != matrix2->cols || rows != matrix2->rows)
	{
		std::cout << "[ERROR] Matrixes are incompatible to add" << std::endl;
		for (int i = 0; i < result->rows; i++)
		{
			for (int j = 0; j < result->cols; j++)
			{
				result->matrix[i * cols + j] = -1;
			}
		}
		result->CalculateNonZero();
		return result;
	}

	for (int i = 0; i < result->rows; i++)
	{
		for (int j = 0; j < result->cols; j++)
		{
			result->matrix[i * cols + j] = matrix[i * cols + j] + matrix2->matrix[i * cols + j];
		}
	}
	return result;
}

Matrix* Matrix::MultiplyMatrixes(Matrix* matrix2)
{
	Matrix* result = new Matrix(rows, matrix2->cols);
	result->InitializeMatrix();

	if (cols != matrix2->rows)
	{
		std::cout << "[ERROR] Matrixes are incompatible to multiply" << std::endl;
		for (int i = 0; i < result->rows; i++)
		{
			for (int j = 0; j < result->cols; j++)
			{
				result->matrix[i * cols + j] = -1;
			}
		}
		return result;
	}

	int multiplyingResult = 0;
	for (int i = 0; i < result->rows; i++)
	{
		for (int j = 0; j < result->cols; j++)
		{
			for (int k = 0; k < result->cols; k++)
			{
				multiplyingResult += matrix[i * cols + k] * matrix2->matrix[k * cols + j];
			}
			result->matrix[i * cols + j] = multiplyingResult;
			multiplyingResult = 0;
		}
	}
	result->CalculateNonZero();
	return result;
}

bool Matrix::CompareMatrix(Matrix* matrix2)
{
	if (rows != matrix2->rows || cols != matrix2->cols)
		return false;
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			if (matrix[i * cols + j] != matrix2->matrix[i * cols + j])
				return false;
		}
	}
	return true;
}

void Matrix::HandleInput()
{
	InputMatrix(0);
}

void Matrix::InputMatrix(int row)
{
	if (row == rows)
		return;

	int* nums = ManualMatrix(row);
	for (int i = 0; i < rows; i++)
	{
		matrix[row * cols + i] = nums[i];
	}
	InputMatrix(row + 1);
}

int* Matrix::ManualMatrix(int row)
{
	switch (row)
	{
	case 0:
		std::cout << "Enter 1st line" << std::endl;
		break;
	case 1:
		std::cout << "Enter 2nd line" << std::endl;
		break;
	case 2:
		std::cout << "Enter 3rd line" << std::endl;
		break;
	default:
		std::cout << "Enter " << row + 1 << "th line" << std::endl;
		break;
	}
	
	std::string input;
	std::getline(std::cin, input);

	int wordsCount = 0;
	char separator = ' ';
	std::string word = "";
	int* nums = InitializeArray(cols);

	for (const char c : input)
	{
		if (wordsCount > cols - 1)
		{
			std::cout << "[ERROR] Row overload" << std::endl;
			return ManualMatrix(row);
		}
		if (c == separator)
		{
			nums[wordsCount++] = stoi(word);
			word = "";
			continue;
		}
		word += c;
	}
	if (word != "")
	{
		nums[wordsCount] = stoi(word);	
	}
	if (wordsCount < cols - 1)
	{
		std::cout << "[ERROR] Row undeload" << std::endl;
		return ManualMatrix(row);
	}

	return nums;
}

int main()
{
	Matrix* matrix1 = new Matrix(3, 3);
	matrix1->RandomMatrix();
	matrix1->PrintMatrix();
	matrix1->PrintNonZeroArray();
	Matrix* matrix2 = new Matrix(3, 3);
	matrix2->HandleInput();
	matrix2->PrintMatrix();
	Matrix* matrix3 = matrix2->MultiplyMatrixes(matrix1);
	matrix3->PrintMatrix();
}
